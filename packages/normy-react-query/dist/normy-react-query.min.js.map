{"version":3,"file":"normy-react-query.min.js","mappings":"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","sources":["webpack://NormyReactQuery/webpack/universalModuleDefinition","webpack://NormyReactQuery/external umd {\"commonjs\":\"@normy/core\",\"commonjs2\":\"@normy/core\",\"amd\":\"@normy/core\",\"root\":\"Normy\"}","webpack://NormyReactQuery/external umd {\"commonjs\":\"react\",\"commonjs2\":\"react\",\"amd\":\"react\",\"root\":\"React\"}","webpack://NormyReactQuery/webpack/bootstrap","webpack://NormyReactQuery/webpack/runtime/define property getters","webpack://NormyReactQuery/webpack/runtime/hasOwnProperty shorthand","webpack://NormyReactQuery/webpack/runtime/make namespace object","webpack://NormyReactQuery/./src/create-query-normalizer.ts","webpack://NormyReactQuery/./src/QueryNormalizerProvider.tsx"],"sourcesContent":["(function webpackUniversalModuleDefinition(root, factory) {\n\tif(typeof exports === 'object' && typeof module === 'object')\n\t\tmodule.exports = factory(require(\"@normy/core\"), require(\"react\"));\n\telse if(typeof define === 'function' && define.amd)\n\t\tdefine([\"@normy/core\", \"react\"], factory);\n\telse if(typeof exports === 'object')\n\t\texports[\"NormyReactQuery\"] = factory(require(\"@normy/core\"), require(\"react\"));\n\telse\n\t\troot[\"NormyReactQuery\"] = factory(root[\"Normy\"], root[\"React\"]);\n})(self, (__WEBPACK_EXTERNAL_MODULE__700__, __WEBPACK_EXTERNAL_MODULE__359__) => {\nreturn ","module.exports = __WEBPACK_EXTERNAL_MODULE__700__;","module.exports = __WEBPACK_EXTERNAL_MODULE__359__;","// The module cache\nvar __webpack_module_cache__ = {};\n\n// The require function\nfunction __webpack_require__(moduleId) {\n\t// Check if module is in cache\n\tvar cachedModule = __webpack_module_cache__[moduleId];\n\tif (cachedModule !== undefined) {\n\t\treturn cachedModule.exports;\n\t}\n\t// Create a new module (and put it into the cache)\n\tvar module = __webpack_module_cache__[moduleId] = {\n\t\t// no module.id needed\n\t\t// no module.loaded needed\n\t\texports: {}\n\t};\n\n\t// Execute the module function\n\t__webpack_modules__[moduleId](module, module.exports, __webpack_require__);\n\n\t// Return the exports of the module\n\treturn module.exports;\n}\n\n","// define getter functions for harmony exports\n__webpack_require__.d = (exports, definition) => {\n\tfor(var key in definition) {\n\t\tif(__webpack_require__.o(definition, key) && !__webpack_require__.o(exports, key)) {\n\t\t\tObject.defineProperty(exports, key, { enumerable: true, get: definition[key] });\n\t\t}\n\t}\n};","__webpack_require__.o = (obj, prop) => (Object.prototype.hasOwnProperty.call(obj, prop))","// define __esModule on exports\n__webpack_require__.r = (exports) => {\n\tif(typeof Symbol !== 'undefined' && Symbol.toStringTag) {\n\t\tObject.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });\n\t}\n\tObject.defineProperty(exports, '__esModule', { value: true });\n};","import {\n  createNormalizer,\n  type Data,\n  type NormalizerConfig,\n} from '@normy/core';\nimport type { QueryClient, QueryKey } from '@tanstack/react-query';\n\nconst cleanIds = (ids: string | string[]) => {\n  return Array.isArray(ids) ? ids.map(id => `@@${id}`) : `@@${ids}`;\n};\n\nconst shouldBeNormalized = (\n  globalNormalize: boolean,\n  localNormalize: boolean | undefined,\n) => {\n  if (localNormalize === undefined) {\n    return globalNormalize;\n  }\n\n  return localNormalize;\n};\n\nconst updateQueriesFromMutationData = (\n  mutationData: Data,\n  normalizer: ReturnType<typeof createNormalizer>,\n  queryClient: QueryClient,\n) => {\n  const queriesToUpdate = normalizer.getQueriesToUpdate(mutationData);\n\n  queriesToUpdate.forEach(query => {\n    queryClient.setQueryData(\n      JSON.parse(query.queryKey) as QueryKey,\n      () => query.data,\n    );\n  });\n};\n\nexport const createQueryNormalizer = (\n  queryClient: QueryClient,\n  normalizerConfig: Omit<NormalizerConfig, 'structuralSharing'> & {\n    normalize?: boolean;\n  } = {},\n) => {\n  const normalize = normalizerConfig.normalize ?? true;\n  const normalizer = createNormalizer(normalizerConfig);\n\n  let unsubscribeQueryCache: null | (() => void) = null;\n  let unsubscribeMutationCache: null | (() => void) = null;\n\n  return {\n    getNormalizedData: normalizer.getNormalizedData,\n    setNormalizedData: (data: Data) =>\n      updateQueriesFromMutationData(data, normalizer, queryClient),\n    clear: normalizer.clearNormalizedData,\n    subscribe: () => {\n      unsubscribeQueryCache = queryClient.getQueryCache().subscribe(event => {\n        if (event.type === 'removed') {\n          normalizer.removeQuery(JSON.stringify(event.query.queryKey));\n        } else if (\n          event.type === 'updated' &&\n          event.action.type === 'success' &&\n          event.action.data !== undefined &&\n          shouldBeNormalized(normalize, event.query.meta?.normalize)\n        ) {\n          normalizer.setQuery(\n            JSON.stringify(event.query.queryKey),\n            event.action.data as Data,\n          );\n        }\n      });\n\n      unsubscribeMutationCache = queryClient\n        .getMutationCache()\n        .subscribe(event => {\n          if (\n            event.type === 'updated' &&\n            event.action.type === 'success' &&\n            event.action.data &&\n            shouldBeNormalized(normalize, event.mutation.meta?.normalize)\n          ) {\n            updateQueriesFromMutationData(\n              event.action.data as Data,\n              normalizer,\n              queryClient,\n            );\n          } else if (\n            event.type === 'updated' &&\n            event.action.type === 'pending' &&\n            (event.mutation.state?.context as { optimisticData?: Data })\n              ?.optimisticData\n          ) {\n            updateQueriesFromMutationData(\n              (event.mutation.state.context as { optimisticData: Data })\n                .optimisticData,\n              normalizer,\n              queryClient,\n            );\n          } else if (\n            event.type === 'updated' &&\n            event.action.type === 'error' &&\n            (event.mutation.state?.context as { rollbackData?: Data })\n              ?.rollbackData\n          ) {\n            updateQueriesFromMutationData(\n              (event.mutation.state.context as { rollbackData: Data })\n                .rollbackData,\n              normalizer,\n              queryClient,\n            );\n          }\n        });\n    },\n    unsubscribe: () => {\n      unsubscribeQueryCache?.();\n      unsubscribeMutationCache?.();\n      unsubscribeQueryCache = null;\n      unsubscribeMutationCache = null;\n    },\n    getObjectById: normalizer.getObjectById,\n    getQueryFragment: normalizer.getQueryFragment,\n    getQueryKeysById: (ids: string | string[]) => {\n      return normalizer\n        .getQueriesById(cleanIds(ids))\n        .map(key => JSON.parse(key));\n    },\n    invalidateQueriesById: (ids: string | string[]) => {\n      normalizer\n        .getQueriesById(cleanIds(ids))\n        .map(key => JSON.parse(key))\n        .forEach(query => queryClient.invalidateQueries({ queryKey: query }));\n    },\n  };\n};\n","import * as React from 'react';\nimport { QueryClient } from '@tanstack/react-query';\nimport { NormalizerConfig } from '@normy/core';\n\nimport { createQueryNormalizer } from './create-query-normalizer';\n\nconst QueryNormalizerContext = React.createContext<\n  undefined | ReturnType<typeof createQueryNormalizer>\n>(undefined);\n\nexport const QueryNormalizerProvider = ({\n  queryClient,\n  normalizerConfig,\n  children,\n}: {\n  queryClient: QueryClient;\n  children: React.ReactNode;\n  normalizerConfig?: Omit<NormalizerConfig, 'structuralSharing'> & {\n    normalize?: boolean;\n  };\n}) => {\n  const [queryNormalizer] = React.useState(() =>\n    createQueryNormalizer(queryClient, normalizerConfig),\n  );\n\n  React.useEffect(() => {\n    queryNormalizer.subscribe();\n\n    return () => {\n      queryNormalizer.unsubscribe();\n      queryNormalizer.clear();\n    };\n  }, []);\n\n  return (\n    <QueryNormalizerContext.Provider value={queryNormalizer}>\n      {children}\n    </QueryNormalizerContext.Provider>\n  );\n};\n\nexport const useQueryNormalizer = () => {\n  const queryNormalizer = React.useContext(QueryNormalizerContext);\n\n  if (!queryNormalizer) {\n    throw new Error(\n      'No QueryNormalizer set, use QueryNormalizerProvider to set one',\n    );\n  }\n\n  return queryNormalizer;\n};\n"],"names":["root","factory","exports","module","require","define","amd","self","__WEBPACK_EXTERNAL_MODULE__700__","__WEBPACK_EXTERNAL_MODULE__359__","__webpack_module_cache__","__webpack_require__","moduleId","cachedModule","undefined","__webpack_modules__","d","definition","key","o","Object","defineProperty","enumerable","get","obj","prop","prototype","hasOwnProperty","call","r","Symbol","toStringTag","value","cleanIds","ids","Array","isArray","map","id","shouldBeNormalized","globalNormalize","localNormalize","updateQueriesFromMutationData","mutationData","normalizer","queryClient","getQueriesToUpdate","forEach","query","setQueryData","JSON","parse","queryKey","data","createQueryNormalizer","normalizerConfig","_normalizerConfig$nor","normalize","createNormalizer","unsubscribeQueryCache","unsubscribeMutationCache","getNormalizedData","setNormalizedData","clear","clearNormalizedData","subscribe","getQueryCache","event","_event$query$meta","type","removeQuery","stringify","action","meta","setQuery","getMutationCache","_event$mutation$meta","_event$mutation$state","_event$mutation$state2","mutation","state","context","optimisticData","rollbackData","unsubscribe","getObjectById","getQueryFragment","getQueryKeysById","getQueriesById","invalidateQueriesById","invalidateQueries","QueryNormalizerContext","React","QueryNormalizerProvider","_ref","children","queryNormalizer","Provider","useQueryNormalizer","Error"],"sourceRoot":""}